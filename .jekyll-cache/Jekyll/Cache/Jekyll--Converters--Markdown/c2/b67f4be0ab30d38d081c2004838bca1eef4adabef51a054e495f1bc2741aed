I"ºy<p>I want to go a bit beyond the trivial <a href="http://spring.io/guides/gs/rest-service/">Hello World example</a> from the Spring website to build a simple <a href="http://spring.io/understanding/REST">restful service</a> that is closer to something you would realistically build. I have seen other tutorials that can overwhelm beginners with some aspects that are not explained, and could be excluded.</p>

<h1 id="what-youll-build">What you‚Äôll build</h1>

<p>You‚Äôll build a service for a <em>user</em>, something that is core thing in a lot of web applications. The table below summarises the actions we create for our <em>user</em>/</p>

<p>The default local address for your Spring Boot application should be: <code class="highlighter-rouge">http://localhost:8080</code>, so the address
to get all users would be <code class="highlighter-rouge">http://localhost:8080/users</code> for example.</p>

<table>
  <tr>
    <th>HTTP Method</th>
    <th>Address</th>
    <th>Action</th>
  </tr>
  <tr>
    <td>GET</td>
    <td>/users</td>
    <td><a href="#create-a-controller">Get all users</a></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/users/{id}</td>
    <td><a href="#get-user-by-id">Get users by id</a></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/users?name=rob+oleary</td>
    <td><a href="#get-user-by-name">Get user by name</a></td>
  </tr>
  <tr>
    <td>POST</td>
    <td>/users</td>
    <td><a href="#add-a-new-user">Add a new user</a></td>
  </tr>
  <tr>
    <td>PUT</td>
    <td>/users</td>
    <td><a href="#update-a-user">Update a user</a></td>
  </tr>
  <tr>
    <td>DELETE</td>
    <td>/users/{id}</td>
    <td><a href="#delete-a-user">Delete a user</a></td>
  </tr>
</table>

<h1 id="understanding-rest-in-spring">Understanding REST in Spring</h1>

<p>Spring is evolving version by version, so its worth noting that you may
see some differences between tutorials. I would always suggest looking at the most recent tutorial that you can find!</p>

<p>A more common issue when beginning to learn REST in Spring is that tutorials
expect you to know the <a href="https://en.wikipedia.org/wiki/Software_design_pattern">design patterns</a> that are being implicitly used, even though this is a <a href="">good tutorial</a>. Bigger applications are divided into layers with particular responsibilities, this makes it easier to maintain
them. You can learn design patterns separately beyond this, but you need
to look at the <a href="https://blog.codinghorror.com/understanding-model-view-controller/">Model-View-Controller (MVC)</a>
design pattern to understand what you‚Äôre doing, because all implementations follow it, as far as I know!</p>

<p>You may also see the use of the following design patterns in an example,
you <em>should</em> skip learning them if your objective is just to understand REST,
but I mention them here if it is something you want to return to:</p>
<ul>
  <li><a href="https://www.tutorialspoint.com/design_pattern/data_access_object_pattern.htm">Data Access Object layer</a> / <a href="http://blog.sapiensworks.com/post/2014/06/02/The-Repository-Pattern-For-Dummies.aspx">Repository layer</a> : controls access to the stored data, so
other parts of the application do not know about the source of the data.</li>
  <li><a href="https://martinfowler.com/eaaCatalog/serviceLayer.html">Service layer</a>: business logic goes here, and it may use multiple repositories. For example, a Book Service might use the user repository and book repository to offer functionality such as ‚Äúsearch for my books‚Äù, and validate if the user is logged in.</li>
</ul>

<p>Don‚Äôt be daunted by what I just mentioned, it is more straightforward than you think!</p>

<h1 id="getting-started">Getting Started</h1>

<p>You can read the ‚ÄúHow to complete this guide‚Äù section in the <a href="http://spring.io/guides/gs/rest-service/">Hello World example</a> if you need guidance on how to set-up your project.</p>

<p>Only one dependency is required and that‚Äôs the <em>Spring Boot Starter Web</em>.
I will use maven and include it as below. You can download my completed project from:
<a href="https://github.com/robole/user-spring-rest">https://github.com/robole/user-spring-rest</a>.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<h2 id="create-the-model-class">Create the model class</h2>

<p>Spring Web follows the
<a href="https://www.tutorialspoint.com/mvc_framework/mvc_framework_introduction.htm">Model-View-Controller design pattern (MVC)</a> as mentioned already.</p>

<p>The <em>model</em> is what we want our program to be about. We want to create a <code class="highlighter-rouge">User</code> class that has the attributes: <em>id</em>, <em>name</em>, and <em>age</em>.</p>

<p><strong>You must include a no argument constructor when you have a POST
or PUT request, or Spring will give you an error.</strong></p>

<p>We add the typical methods to make a regular java class.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">//you must include this when you have a POST or PUT</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">(){</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//getters and setters, equals() and hashCode()</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="create-a-controller">Create a Controller</h2>

<p>The Controller is responsible for matching a HTTP request with a java method that provides a response.</p>

<p>We annotate our Controller with <code class="highlighter-rouge">@RestController</code>, and we add methods to
handle the different requests. Spring is going to transform the data into JSON for us before it is returned as a reponse.</p>

<p>I have created an <code class="highlighter-rouge">ArrayList</code> of users to have
some data to return. <code class="highlighter-rouge">getUsers()</code> returns all of the users
for the address <a href="http://localhost:8080/users">http://localhost:8080/users</a>. We specify this in the <code class="highlighter-rouge">@RequestMapping</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.roboleary.model.User</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;();</span>

    <span class="kd">public</span> <span class="nf">UserController</span><span class="o">(){</span>
        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"Rob OLeary"</span><span class="o">,</span> <span class="mi">21</span><span class="o">));</span>
        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">"Angela Merkel"</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">"Tamer Osman"</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="c1">//for GET to http://localhost:8080/users</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span><span class="o">=</span><span class="no">GET</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">users</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>

<h2 id="requestmapping-variants">@RequestMapping Variants</h2>

<p>Spring 4.3 introduced shortcut annotations, which serve the same purpose as <code class="highlighter-rouge">@RequestMapping</code> but have the HTTP method as part it‚Äôs name.</p>

<p>You may seen them used also. They are:</p>
<ul>
  <li><code class="highlighter-rouge">@GetMapping</code></li>
  <li><code class="highlighter-rouge">@PostMapping</code></li>
  <li><code class="highlighter-rouge">@PutMapping</code></li>
  <li><code class="highlighter-rouge">@DeleteMapping</code></li>
  <li><code class="highlighter-rouge">@PatchMapping</code></li>
</ul>

<p>So, to annotate your  method you could use this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"/users"</span><span class="o">)</span>
</code></pre></div></div>

<p>or this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span><span class="o">=</span><span class="no">GET</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">"/users"</span><span class="o">)</span>
</code></pre></div></div>

<h2 id="create-a-class-to-start-a-spring-boot-application">Create a class to start a Spring Boot application</h2>

<p>Spring Boot simplifies the creation of an application. We only need to annotate a class with <code class="highlighter-rouge">@SpringBootApplication</code>, and in <code class="highlighter-rouge">main()</code>
we call the static method  <code class="highlighter-rouge">SpringApplication.run()</code> to launch the application. Spring Boot will package the application and run it in an embedded web server to create our web services for us.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoApplication</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Easy peasy!</p>

<h2 id="run-the-application">Run the application</h2>

<p>You can run the <code class="highlighter-rouge">DemoApplication</code> class, and test it in the browser.</p>

<p><img src="/assets/img/blog/2018-07-17-restful-service/get.png" alt="get request" /></p>

<h1 id="get-user-by-id">Get user by id</h1>

<p>To get the user by id, we want to be able to specify the id inside the address path, this is called a <strong>path variable</strong>.</p>

<p>For example, we navigate to <a href="http://localhost:8080/users/2">http://localhost:8080/users/2</a> to get
the user with an id of 2, and we expect to get this response:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[{</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">Angela Merkel</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">:</span><span class="mi">20</span><span class="p">}]</span>
</code></pre></div></div>

<p>We put the variable name within curly brackets as part of our <code class="highlighter-rouge">@RequestMapping</code> annotation, and we declare it using the <code class="highlighter-rouge">@PathVariable</code> annotation in our method signature. We search through our <code class="highlighter-rouge">ArrayList</code> to find the first user with that id.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span><span class="o">=</span><span class="no">GET</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">"/users/{id}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUsersById</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">){</span>
    <span class="nc">User</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="k">for</span><span class="o">(</span><span class="nc">User</span> <span class="nl">user:</span> <span class="n">users</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">id</span><span class="o">){</span>
            <span class="n">found</span> <span class="o">=</span> <span class="n">user</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">found</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="get-user-by-name">Get user by name</h1>

<p>To get the user by name, we want to be able to specify a parameter at the end of the address. For example, we navigate to
<a href="http://localhost:8080/users?name=rob oleary">http://localhost:8080/users?name=rob oleary</a>
to get the user with a name of ‚Äúrob oleary‚Äù.</p>

<p>A browser may add ‚Äú+‚Äù for the space in the address like this: http://localhost:8080/user?name=rob+oleary,
spaces in web addresses are considered <a href="https://stackoverflow.com/questions/497908/is-a-url-allowed-to-contain-a-space">unsafe</a>. You don‚Äôt need to do anything
differently, it will work either way! We expect to get this response:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[{</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">Rob OLeary</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">:</span><span class="mi">21</span><span class="p">}]</span>
</code></pre></div></div>

<p>We need to add <code class="highlighter-rouge">params</code> to our <code class="highlighter-rouge">@RequestMapping</code> to specify the parameter name. We need this to define an unique path, so Spring can map the request to the correct method with certainty. We specify <code class="highlighter-rouge">@RequestParam</code> in our method signature, and we can use this variable inside our method to search for the user with that name. We use
<code class="highlighter-rouge">equalsIgnoreCase()</code> to accept whatever mix of big and small letters we get from the client.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//for GET to http://localhost:8080/user?name=rob oleary</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span><span class="o">=</span><span class="no">GET</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">"/users"</span><span class="o">,</span> <span class="n">params</span> <span class="o">=</span> <span class="s">"name"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsersByName</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"name"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">filteredUsers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;();</span>

    <span class="k">for</span><span class="o">(</span><span class="nc">User</span> <span class="nl">user:</span> <span class="n">users</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">filteredUsers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">filteredUsers</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="add-a-new-user">Add a new user</h1>

<ul>
  <li>HTTP POST</li>
</ul>

<p>We add the user to our <code class="highlighter-rouge">ArrayList</code>. We use <code class="highlighter-rouge">ResponseEntity</code> as our method return type, it is a wrapper class where we can optionally include things such as: the status code (outcome of action), and headers to give the client some information about the action.</p>

<p>We return a status code of HttpStatus.CREATED, which is HTTP code of 201. There is no opportunity for there to be a failure to add a new user to our <code class="highlighter-rouge">ArrayList</code>, but you should consider this if you use a database.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"users"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">u</span><span class="o">)</span> <span class="o">{</span>
       <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">);</span>
       <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="update-a-user">Update a user</h1>

<ul>
  <li>HTTP PUT</li>
</ul>

<p>Updates a user; or add a new user if there is no user found. It is idempotent, which means if you run the operation multiple times, the result
is the same.</p>

<p>We return different status codes depending on whether we updated or added a user.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PutMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"users"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">addOrUpdate</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">u</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ResponseEntity</span> <span class="n">response</span><span class="o">;</span>

    <span class="k">if</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">u</span><span class="o">)){</span>
        <span class="c1">//update by setting it at the specified position</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">u</span><span class="o">);</span>
        <span class="n">users</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">u</span><span class="o">);</span>
        <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span><span class="o">{</span>
        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">);</span>
        <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="partial-update-of-a-user">Partial update of a user</h1>

<ul>
  <li>HTTP PATCH</li>
</ul>

<p>PATCH is used when we update some fields of an object. This can be important when we use a database as it is more efficient to only update what has changed, rather than replacing an entire object. As we are doing everything in memory with an <code class="highlighter-rouge">ArrayList</code>, there is no benefit to this, so <strong>I have not included a method</strong>.</p>

<h1 id="delete-a-user">Delete a user</h1>

<ul>
  <li>HTTP DELETE</li>
</ul>

<p>We remove the user from our <code class="highlighter-rouge">ArrayList</code>, and  return a status code to
indicate if the user was found or not.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@DeleteMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"users/{id}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

    <span class="k">for</span><span class="o">(</span><span class="nc">User</span> <span class="nl">user:</span> <span class="n">users</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">id</span><span class="o">){</span>
            <span class="n">users</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">found</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//found</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="how-to-verify-test-your-application">How to verify (test) your application</h1>

<p>This is just to verify your code works really. If you want to unit test your code, this is a separate topic.</p>

<p>As mentioned previously, GET methods can be tested in your browser.</p>

<p>To test the other methods, you need a rest client like <a href="https://www.getpostman.com/">Postman</a>, or a command-line tool like
<a href="https://curl.haxx.se/">cURL</a>.</p>

<p>I will show you one example using Postman here. To add a new user, we
make a POST request like below, we put the JSON of the new user in the request body, and set the header <em>Content-Type</em> to ‚Äúapplication/json‚Äù (you can see it chosen as ‚ÄúJSON(application/json)‚Äù in orange text in the picture).</p>

<p><img src="/assets/img/blog/2018-07-17-restful-service/post.png" alt="post request" /></p>

<h1 id="source-code">Source code</h1>

<p>Available <a href="https://github.com/robole/user-spring-rest">here</a> on github.</p>

<h1 id="next-steps">Next steps</h1>

<p>If you want to learn about unit testing and intgeration of this application, you
can read <a href="/testing/2018/08/01/test-restful-service.html">this post</a>.</p>

<p>You probably want to use a database to have long-term data.
You can use Spring Data Rest for this. You can look at my <a href="https://github.com/robole/library-rest-minimum">library example</a> to explore this, or look at <a href="https://www.javacodegeeks.com/2018/08/restful-api-spring-rest-data-jpa-h2.html">this javacodegeeks tutorial</a>.</p>

<p>If you want a more comprehensive tutorial on building a complete RESTful service that includes: using a database with JPA; error handling; testing; building a HATEOAS REST service; and adding security, you can look at <a href="https://spring.io/guides/tutorials/bookmarks/">this tutorial</a> from the Spring website. I found the testing section to be a bit poor, they are confusing unit testing with integration testing, so I would skip this section.</p>
:ET