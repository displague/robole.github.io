I"∏<p><img src="https://media.giphy.com/media/ZaKZQ6Xw98vG7toLb6/giphy.gif" alt="singer singing aria" /></p>

<p>Nope. Not <em>this</em> aria!</p>

<h2 id="what-is-aria">What is ARIA?</h2>

<p>We‚Äôre talking about <em>accessibility</em>!</p>

<p>Accessibility refers to the creation of digital content that can be used by everyone.</p>

<blockquote>The Web is fundamentally designed to work for all people, whatever their hardware, software, language, location, or ability. - <abbr title="World Wide Web Consortium">W3C</abbr></blockquote>

<p>The <abbr title="World Wide Web Consortium">W3C</abbr> documentation is not easy reading, but finally I have read through the specification and guides to understand it properly for myself.</p>

<h3 id="tell-me-already">Tell me already</h3>

<p>If you create your own whizz-bang Date Picker, how will a screen reader know what it is?</p>

<p>You need to tell it. Use <a href="https://www.w3.org/TR/wai-aria-1.1/">ARIA (Accessible Rich Internet Applications)</a>, WAI-ARIA, license to include!</p>

<p><img src="https://media.giphy.com/media/wXwcvchUCQjvO/giphy.gif" alt="James bond" /></p>

<p><strong>ARIA is a World Wide Web Consortium (W3C) specification with the aim of improving accessibility for modern web applications, in particular for dynamic content and custom user interface (UI) controls</strong>. It defines a set of attributes that can provide additional semantics to elements.</p>

<p>ARIA has no effect on how elements are displayed or behave in browsers. Its purpose is to provide extra description for Assistive Technologies (ATs) when needed.</p>

<h3 id="use-cases">Use Cases</h3>

<p>The most common Use Cases for ARIA are:</p>

<ol>
  <li>Assist in identifying the major regions of your page to make navigation easier (these are called landmarks);</li>
  <li>Identify and describe a custom <abbr title="User Interface">UI</abbr> control;</li>
  <li>Tell a user when you are loading dynamic content;</li>
  <li>Alert a user when something important pops up;</li>
  <li>Tell screen readers when the state of the page changes.</li>
</ol>

<p>ARIA is our last stop for accessibility, the previous post spoke about what you should be doing already.</p>

<h2 id="rules-of-aria">Rules of ARIA</h2>

<p>The <abbr title="World Wide Web Consortium">W3C</abbr> made <a href="https://www.w3.org/TR/using-aria/#NOTES">some rules</a> as guidelines to help you use ARIA properly.</p>

<blockquote>
  <p>The first rule of ARIA is, do not use ARIA, if possible!</p>
</blockquote>

<p>These are the rules:</p>

<ol>
  <li>
    <p>If you <em>can</em> use a native HTML element or attribute with the semantics and behaviour you require already built in, then use it!</p>
  </li>
  <li>
    <p>Do not change native semantics, unless you <em>really</em> have to.  If you give a <code class="highlighter-rouge">div</code> a <code class="highlighter-rouge">role="button"</code>, there is no <em>‚Äòhey presto, now I am button‚Äô</em> moment. It does not have all of the typical keyboard events you associate with a button.</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">role=</span><span class="s">"button"</span><span class="nt">&gt;</span>Faker<span class="nt">&lt;/button&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>All interactive ARIA controls must be usable with the keyboard. For example, if you use <code class="highlighter-rouge">role=button</code>, the element must be able to receive focus and a user must be able to activate the action associated with the element using <em>both</em> the <kbd>enter</kbd> (on WIN OS); or <kbd>return</kbd> (MAC OS) and <kbd>space</kbd>.</p>
  </li>
  <li>
    <p>Do not use <code class="highlighter-rouge">role="presentation"</code> or <code class="highlighter-rouge">aria-hidden="true"</code> on a <em>focusable</em> element .</p>
  </li>
  <li>
    <p>All interactive elements must have an <a href="http://www.w3.org/TR/accname-aam-1.1/#dfn-accessible-name">accessible name</a>. We must label them. We discuss it more in <a href="#labels">Labels</a>.</p>
  </li>
</ol>

<h2 id="features">Features</h2>

<p>There are three main features of ARIA:</p>

<ul>
  <li><strong>Roles</strong> ‚Äî These define what an element is or does.</li>
  <li><strong>Properties</strong> ‚Äî Properties are attributes that are inherent to an object. Properties are less likely to change than <em>states</em>, but that is not a rule. For example, <code class="highlighter-rouge">aria-label="signup form"</code> gives a form an accessible name.</li>
  <li><strong>States</strong> ‚Äî A state is a property of an object that may change in response to user action or automated process. For example, <code class="highlighter-rouge">aria-disabled="true"</code> specifies that the element is currently disabled.</li>
</ul>

<p>The distinction between <em>states</em> and <em>properties</em> is not great, they both are attributes prefixed with ‚Äú<em>aria-</em>‚Äù.  It is of little consequence to most web content authors which is which, so you may see them simply referred to as attributes. I will speak about them together later.</p>

<h2 id="labels">Labels</h2>

<p>If you write HTML well, you probably have a <code class="highlighter-rouge">label</code> for each <code class="highlighter-rouge">input</code> and <code class="highlighter-rouge">button</code>. Nothing else needs to be done for them if you do that.</p>

<p>There are other cases when you need to label an element, and thats when ARIA steps in.</p>

<p>You may want users to be able to navigate to your <code class="highlighter-rouge">form</code>. We add an <code class="highlighter-rouge">aria-label</code> to accomplish thi We try to keep this label short.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">aria-label=</span><span class="s">"product feedback"</span><span class="nt">&gt;</span>
    ... content ...
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>For a longer label, we can use <code class="highlighter-rouge">aria-labelledby</code> to point to a heading, or another element.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;section</span> <span class="na">aria-labelledby=</span><span class="s">"sect1"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">"sect1"</span><span class="nt">&gt;</span>Product Warnings and Returns Guidelines<span class="nt">&lt;/h2&gt;</span>
    ... content ...
<span class="nt">&lt;/section&gt;</span> 
</code></pre></div></div>

<h2 id="tell-me-more-show-me-code">Tell me more. Show me code.</h2>

<p>If you want me to follow up and finish this topic, let me know. Thanks for reading. üòä</p>

<p><strong>Photo Attribution</strong>: <a href="https://www.flickr.com/photos/draket/10055170993">Lego Opera Singer by Ted Drake</a></p>
:ET