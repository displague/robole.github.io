I"»x<h1 id="identifiers-objective-13">Identifiers (Objective 1.3)</h1>
<ul>
  <li>Identifiers can only begin with a letter, an underscore, or a currency character.</li>
  <li>After the first character, identifiers can also include digits.</li>
  <li>Characters such as #%^ cannot be in an identifier.</li>
  <li>Identifiers can be of any length.</li>
  <li>Identifiers are case-sensitive.</li>
  <li>Java‚Äôs built-in keywords (reserved words that have defined meaning in Java) must not be used as identifiers:</li>
</ul>

<table>
  <thead>
    <tr>
      <th>keywords</th>
      <th>¬†</th>
      <th>¬†</th>
      <th>¬†</th>
      <th>¬†</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>abstract</td>
      <td>continue</td>
      <td>for</td>
      <td>new</td>
      <td>switch</td>
    </tr>
    <tr>
      <td>assert (3)</td>
      <td>default</td>
      <td>goto (1)</td>
      <td>package</td>
      <td>synchronized</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>do</td>
      <td>if</td>
      <td>private</td>
      <td>this</td>
    </tr>
    <tr>
      <td>break</td>
      <td>double</td>
      <td>implements</td>
      <td>protected</td>
      <td>throw</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>else</td>
      <td>import</td>
      <td>public</td>
      <td>throws</td>
    </tr>
    <tr>
      <td>case</td>
      <td>enum (4)</td>
      <td>instanceof</td>
      <td>return</td>
      <td>transient</td>
    </tr>
    <tr>
      <td>catch</td>
      <td>extends</td>
      <td>int</td>
      <td>short</td>
      <td>try</td>
    </tr>
    <tr>
      <td>char</td>
      <td>final</td>
      <td>interface</td>
      <td>static</td>
      <td>void</td>
    </tr>
    <tr>
      <td>class</td>
      <td>finally</td>
      <td>long</td>
      <td>strictfp (2)</td>
      <td>volatile</td>
    </tr>
    <tr>
      <td>const (1)</td>
      <td>float</td>
      <td>native</td>
      <td>super</td>
      <td>while</td>
    </tr>
  </tbody>
</table>

<p>
(1)	 	not used
(2)	 	added in 1.2
(3) 	added in 1.4
(4)	 	added in 5.0
</p>

<ul>
  <li><em>true</em>, <em>false</em>, and <em>null</em> might seem like keywords, but they are actually literals; you also cannot use them as identifiers in your programs.</li>
  <li>Oracle‚Äôs coding convention dictates that camelCase is used for identifiers (except constants), the first letter of inner words in compound identifiers should be capitalised e.g. <em>myVariable</em>, <em>PrintWriter</em>.</li>
  <li>Classes should have their first letter capitalized e.g <em>Dog</em>.</li>
  <li>Methods should have their first letter in lower case, typically verb-noun pairs e.g. <em>doCalculation()</em>.</li>
  <li>Javabean methods must start with: set, get, is, add, or remove depending on the method‚Äôs purpose</li>
  <li>Variables should have their first letter in lower case, they should be kept short if possible e.g. <em>myString</em>.</li>
  <li>Constants are created using static and final. They should be in upper case with underscores as word separators e.g. <em>MAX_NUMBER</em>.</li>
</ul>

<h1 id="declaration-rules-objective-11">Declaration Rules (Objective 1.1)</h1>

<ul>
  <li>A source code file can have only one public class.</li>
  <li>If the source file contains a public class, the filename must match the public class name.</li>
  <li>A file can have only one package statement, but multiple imports.</li>
  <li>The package statement (if any) must be the first (non-comment) line in a source file.</li>
  <li>The import statements (if any) must come after the package and before the class declaration.</li>
  <li>package and import statements apply to all classes in the file.</li>
  <li>A file can have only one public class, but can include other classes with default visibility.</li>
  <li>Files with no public classes have no naming restrictions.</li>
</ul>

<h1 id="class-access-modifiers-objective-11">Class Access Modifiers (Objective 1.1)</h1>
<ul>
  <li>Classes can only have <code class="highlighter-rouge">public</code>, or default access (when no access modifier is provided).</li>
  <li>A class with default access can be seen only by classes within the same package.</li>
  <li>A class with public access can be seen by all classes from all packages.</li>
  <li>Class visibility revolves around whether code in one class can:
    <ul>
      <li>Create an instance of another class.</li>
      <li>Subclass another class.</li>
    </ul>
  </li>
</ul>

<h1 id="class-modifiers-nonaccess-objective-12">Class Modifiers (Nonaccess) (Objective 1.2)</h1>
<ul>
  <li>Classes can also be modified with <code class="highlighter-rouge">final</code>, <code class="highlighter-rouge">abstract</code>, or <code class="highlighter-rouge">strictfp</code>.</li>
  <li>A final class cannot be subclassed.</li>
  <li>An abstract class cannot be instantiated.</li>
  <li>
    <p><code class="highlighter-rouge">strictfp</code> means that any method code in the class will conform to the IEEE 754 standard rules for floating points to remain platform independent.</p>
  </li>
  <li>A class cannot be both <code class="highlighter-rouge">final</code> and <code class="highlighter-rouge">abstract</code>.</li>
  <li>A single abstract method in a class means the whole class must be abstract.</li>
  <li>An abstract class can have both abstract and nonabstract methods.</li>
  <li>The first concrete class to extend an abstract class must implement all of its abstract methods.</li>
</ul>

<h1 id="interface-implementation-objective-12">Interface Implementation (Objective 1.2)</h1>
<ul>
  <li>
    <p>An <code class="highlighter-rouge">interface</code> is like a 100% abstract class that can be implemented by any class from any inheritance tree.</p>
  </li>
  <li>Interface methods are by default public and abstract‚Äîexplicit declaration of these modifiers is optional.</li>
  <li>Interface methods cannot be <code class="highlighter-rouge">static</code>, <code class="highlighter-rouge">final</code>, <code class="highlighter-rouge">strictfp</code>, or <code class="highlighter-rouge">native</code>.</li>
  <li>
    <p>Interfaces can have constants, which are always implicitly <code class="highlighter-rouge">public</code>, <code class="highlighter-rouge">static</code>, and <code class="highlighter-rouge">final</code>.</p>
  </li>
  <li>Interfaces can extend one or more other interfaces.</li>
  <li>Interfaces CANNOT extend a class</li>
  <li>
    <p>Interfaces CANNOT implement an interface.</p>
  </li>
  <li>A class implementing an interface can be abstract.</li>
  <li>
    <p>An abstract implementing class does not have to implement the interface methods, it is up to the first concrete subclass.</p>
  </li>
  <li>A legal concrete class which implements an interface has the following properties:</li>
  <li>It provides concrete implementations for all the interface‚Äôs methods.</li>
  <li>The methods it must implement must be public.</li>
  <li>It must follow all legal override rules for the methods it implements (see chap 2).</li>
</ul>

<h1 id="member-access-modifiers-objectives-13-and-14">Member Access Modifiers (Objectives 1.3 and 1.4)</h1>
<ul>
  <li>Instance variables and methods are known as ‚Äúmembers.‚Äù</li>
  <li>Member access comes in two forms:
    <ul>
      <li>Code in one class can access a member of another class.</li>
      <li>A subclass can inherit a member of its superclass.</li>
    </ul>
  </li>
  <li>Member access modifiers are:
    <ul>
      <li><code class="highlighter-rouge">public</code>: accessed by all.</li>
      <li>‚Äúdefault‚Äù: accessed only by classes in the same package.</li>
      <li><code class="highlighter-rouge">private</code>: accessed in same class only.</li>
      <li><code class="highlighter-rouge">protected</code>: accessed inside the package and subclasses outside.</li>
    </ul>
  </li>
  <li>If a class cannot be accessed, its members cannot be accessed. e.g. the <em>Employee</em> class will only be accessible in the <em>EmpOne</em> package.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">EmpOne</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">Employee</span><span class="c1">//default access</span>
<span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="n">empid</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span><span class="kt">int</span> <span class="n">age</span><span class="o">){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">empid</span><span class="o">=</span><span class="n">id</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="o">=</span><span class="n">age</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">EmpTwo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">EmpOne.Employee</span><span class="o">;</span> <span class="c1">//Compiler error</span>
<span class="kd">class</span>  <span class="nc">Test</span><span class="o">{</span>   
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Employee</span> <span class="n">x1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">21</span><span class="o">);</span>
    <span class="c1">//Employee must be public to be accessed</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The age of Employee x1 is "</span><span class="o">+</span><span class="n">x1</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>A public class needs to be imported if it is to be used outside of its package.</li>
  <li>Members accessed without the dot operator (.) must belong to the same class.</li>
</ul>

<h1 id="local-variables-objective-13">Local Variables (Objective 1.3)</h1>
<ul>
  <li>Local variable declarations cannot have access modifiers.</li>
  <li><code class="highlighter-rouge">final</code> is the only modifier available to local variables.</li>
  <li>Local variables do NOT get default values, so they must be initialized before being used. You don‚Äôt have to initialize it if you don‚Äôt use it!</li>
</ul>

<h1 id="other-modifiersmembers-objective-13">Other Modifiers‚ÄîMembers (Objective 1.3)</h1>
<ul>
  <li>
    <p>final methods cannot be overridden in a subclass.</p>
  </li>
  <li>
    <p>abstract methods end in a semicolon; they do NOT have curly braces.</p>
  </li>
  <li>Abstract methods must be implemented by a subclass, so they must be inheritable, therefore:</li>
  <li>abstract methods cannot be private.</li>
  <li>
    <p>abstract methods cannot be final.</p>
  </li>
  <li>The <code class="highlighter-rouge">native</code> modifier applies only to methods, it marks a method as having platform-dependent code.</li>
  <li>A native method CANNOT have a method body.</li>
  <li>
    <p>The <code class="highlighter-rouge">strictfp</code> modifier applies only to classes and methods.</p>
  </li>
  <li>The <code class="highlighter-rouge">synchronized</code> modifier applies only to methods and code blocks.</li>
  <li>synchronized methods can have any access control and can also be marked final.</li>
</ul>

<h1 id="methods-with-var-args-objective-14">Methods with var-args (Objective 1.4)</h1>
<ul>
  <li>As of Java 5, methods can declare a parameter that accepts from zero to many arguments, called a var-arg method.</li>
  <li>
    <p>Var-arg can also take an array of the specified type.</p>
  </li>
  <li>A var-arg parameter is declared with the syntax ‚Äútype‚Ä¶ name‚Äù, the spacing between the variable type, the ellipsis and the variable name is unimportant  e.g.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doStuff</span><span class="o">(</span><span class="kt">int</span><span class="o">...</span> <span class="n">x</span><span class="o">){</span> <span class="o">}</span>	<span class="c1">//legal</span>
<span class="n">doStuff</span><span class="o">(</span><span class="kt">int</span><span class="o">...</span><span class="na">x</span><span class="o">){</span> <span class="o">}</span>	<span class="c1">//legal</span>
<span class="n">doStuff</span><span class="o">(</span><span class="kt">int</span> <span class="o">...</span> <span class="n">x</span><span class="o">){</span> <span class="o">}</span>	<span class="c1">//legal</span>
<span class="n">doStuff</span><span class="o">(</span><span class="kt">int</span> <span class="o">...</span><span class="na">x</span><span class="o">){</span> <span class="o">}</span>	<span class="c1">//legal</span>
</code></pre></div></div>

<ul>
  <li>You can have only one var-arg parameter in a method.</li>
  <li>The var-arg must be the last  parameter in the method‚Äôs signature</li>
</ul>

<h1 id="variable-declarations-objective-13">Variable Declarations (Objective 1.3)</h1>

<table>
  <thead>
    <tr>
      <th>Data    Type</th>
      <th>Width    (bits)</th>
      <th>Default    Value</th>
      <th>Min ‚Äì Max Range</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>boolean</td>
      <td>not applicable</td>
      <td>false</td>
      <td>-</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>8</td>
      <td>0</td>
      <td>-128 to  127</td>
    </tr>
    <tr>
      <td>short</td>
      <td>16</td>
      <td>0</td>
      <td>-32,768 to 32,767</td>
    </tr>
    <tr>
      <td>char</td>
      <td>16</td>
      <td>0  (‚Äò\u0000‚Äô)</td>
      <td>0 to 65,535</td>
    </tr>
    <tr>
      <td>int</td>
      <td>32</td>
      <td>0</td>
      <td>-2,147,483,648 to 2,147,483,647</td>
    </tr>
    <tr>
      <td>long</td>
      <td>64</td>
      <td>0L</td>
      <td>-9,223,372,036.854,775,808 to   9,223,372,036,854,775,807</td>
    </tr>
    <tr>
      <td>float</td>
      <td>32</td>
      <td>0.0f</td>
      <td>-</td>
    </tr>
    <tr>
      <td>double</td>
      <td>64</td>
      <td>0.0d</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>All six number types in Java (<code class="highlighter-rouge">byte</code>, <code class="highlighter-rouge">short</code>, <code class="highlighter-rouge">int</code>, <code class="highlighter-rouge">long</code>, <code class="highlighter-rouge">float</code>, <code class="highlighter-rouge">double</code>)  are signed, meaning they can be negative or positive. The leftmost bit (the most significant bit) is used to represent the sign, where a 1 means negative and 0 means positive, the rest of the bits represent the value using two‚Äôs complement notation.</p>
  </li>
  <li>Instance variables can:
    <ul>
      <li>have any access control</li>
      <li>be marked <code class="highlighter-rouge">final</code>, <code class="highlighter-rouge">transient</code>, or <code class="highlighter-rouge">volatile</code></li>
    </ul>
  </li>
  <li>Instance variables CANNOT be:
    <ul>
      <li><code class="highlighter-rouge">abstract</code>, <code class="highlighter-rouge">synchronized</code>, <code class="highlighter-rouge">native</code>, or <code class="highlighter-rouge">strictfp</code>.</li>
      <li>marked <code class="highlighter-rouge">final volatile</code>.</li>
    </ul>
  </li>
  <li>It is legal to declare a local variable with the same name as an instance variable, this is called ‚Äúshadowing.‚Äù</li>
  <li><code class="highlighter-rouge">final</code> variables have the following properties:
    <ul>
      <li>final reference variables cannot refer to a different value once it has been assigned.</li>
      <li>A blank final instance variable must be definitely assigned at the end of every constructor of the class in which it is declared; otherwise a compiler error occurs.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span>  <span class="nc">Test1</span><span class="o">{</span>  
	<span class="nc">Test1</span><span class="o">(){}</span> <span class="c1">//compiler error</span>
	<span class="kd">final</span> <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">class</span>  <span class="nc">Test2</span><span class="o">{</span>  
	<span class="nc">Test2</span><span class="o">(){}</span>
	<span class="kd">final</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">5</span><span class="o">;</span> <span class="c1">//legal</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>There is no such thing as a final object. An object reference marked final does not mean the object itself is immutable.</li>
  <li>The <code class="highlighter-rouge">transient</code> modifier applies to instance and static variables.</li>
  <li>
    <p>The <code class="highlighter-rouge">volatile</code> modifier applies only to instance variables (not to static variables).</p>
  </li>
  <li>A volatile variable‚Äôs value is always held in main memory so that it can be accessed by different threads, it effectively synchronizes all cached copies of variables with main memory.</li>
</ul>

<h1 id="array-declarations-objective-13">Array Declarations (Objective 1.3)</h1>
<ul>
  <li>Arrays can hold primitives or objects, but the array itself is always an object.</li>
  <li>When you declare an array, the brackets can be to the left or right of the variable name e.g. <code class="highlighter-rouge">int[] key;</code> or <code class="highlighter-rouge">int key [];</code></li>
  <li>It is never legal to include the size of an array in the declaration.</li>
  <li>An array of objects can hold any object that passes the IS-A (or <code class="highlighter-rouge">instanceof</code>) test for the declared type of the array e.g. if Horse extends Animal, then a Horse object can go into an Animal array.</li>
</ul>

<h1 id="static-variables-and-methods-objective-14">Static Variables and Methods (Objective 1.4)</h1>
<ul>
  <li>They belong to a class.</li>
  <li>There is only one copy of a static variable and all instances share it.</li>
  <li>An object reference is not needed in order to use static members of the class.</li>
  <li>Static methods do NOT have direct access to non-static members.</li>
</ul>

<h1 id="enums-objective-13">Enums (Objective 1.3)</h1>
<ul>
  <li>An <code class="highlighter-rouge">enum</code> specifies a list of constant values assigned to a type.</li>
  <li>It lets you restrict a variable to having one of only a few pre-defined values.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">CoffeeSize</span><span class="o">{</span>
  <span class="no">BIG</span><span class="o">,</span> <span class="no">HUGE</span><span class="o">,</span> <span class="no">OVERWHELMING</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>An enum‚Äôs constants must be the first statement.</li>
  <li>An enum is NOT a String or an int; an enum‚Äôs constant type is the enumtype e.g. BIG has a type of CoffeeSize.</li>
  <li>If more code follows the constant types, they must be terminated with a semi-colon.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">CoffeeSize</span><span class="o">{</span>
	<span class="no">BIG</span><span class="o">,</span> <span class="no">HUGE</span><span class="o">,</span> <span class="no">OVERWHELMING</span><span class="o">;</span>
  <span class="c1">//semi-colon required at end of list</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLidCode</span><span class="o">(){</span>
		<span class="k">return</span> <span class="s">"B"</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>An enum can be declared outside or inside a class; but NOT in a method.</li>
  <li>An enum that is NOT enclosed in a class can be declared with only the public or default modifier.</li>
  <li>Enums can contain constructors, methods, variables, and constant class bodies.</li>
  <li>Enum constants can send arguments to the enum constructor, using the syntax <code class="highlighter-rouge">BIG(8)</code>, where the int literal 8 is passed to the enum constructor.</li>
  <li>A constant specific class body can redefine a method for that constant, it overrides the method defined in the enum.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">CoffeeSize</span> <span class="o">{</span>
  <span class="no">BIG</span><span class="o">(</span><span class="mi">8</span><span class="o">),</span>
  <span class="no">HUGE</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span>
  <span class="no">OVERWHELMING</span><span class="o">(</span><span class="mi">16</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// overrides</span>
  	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLidCode</span><span class="o">()</span> <span class="o">{</span>
  		<span class="k">return</span> <span class="s">"A"</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">};</span>

  <span class="kd">private</span> <span class="kt">int</span> <span class="n">ounces</span><span class="o">;</span>

  <span class="nc">CoffeeSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">ounces</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">ounces</span> <span class="o">=</span> <span class="n">ounces</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLidCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// this method is overridden for the OVERWHELMING constant</span>
	  <span class="k">return</span> <span class="s">"B"</span><span class="o">;</span> <span class="c1">// default value we want to return</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOunces</span><span class="o">()</span> <span class="o">{</span>
  	<span class="k">return</span> <span class="n">ounces</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>You can think of the CoffeeSize enums as existing in an array of type CoffeeSize, you can iterate through the values of an enum by invoking the <code class="highlighter-rouge">values()</code> method on the enum type.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="o">(</span><span class="nc">CoffeeSize</span> <span class="nl">cs:</span> <span class="nc">CoffeeSize</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cs</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">cs</span><span class="o">.</span><span class="na">getOunces</span><span class="o">());</span>

<span class="c1">//prints:</span>
<span class="c1">//BIG 8</span>
<span class="c1">//HUGE 10</span>
<span class="c1">//OVERWHELMING 16</span>
</code></pre></div></div>
<ul>
  <li>The semicolon at the end of an enum declaration is optional.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">Foo</span> <span class="o">{</span> <span class="no">ONE</span><span class="o">,</span> <span class="no">TWO</span><span class="o">,</span> <span class="no">THREE</span><span class="o">}</span>	<span class="c1">//legal</span>
<span class="kd">enum</span> <span class="nc">Foo</span> <span class="o">{</span> <span class="no">ONE</span><span class="o">,</span> <span class="no">TWO</span><span class="o">,</span> <span class="no">THREE</span><span class="o">};</span>	<span class="c1">//legal</span>
</code></pre></div></div>
<ul>
  <li>Enums can be compared using either <code class="highlighter-rouge">equals()</code> or <code class="highlighter-rouge">==</code>.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">Days</span> <span class="o">{</span><span class="no">M</span><span class="o">,</span> <span class="no">T</span><span class="o">,</span> <span class="no">W</span><span class="o">,</span> <span class="no">TH</span><span class="o">,</span> <span class="no">F</span><span class="o">,</span> <span class="no">SA</span><span class="o">,</span> <span class="no">SU</span><span class="o">};</span>

<span class="nc">Days</span> <span class="n">d1</span> <span class="o">=</span> <span class="nc">Days</span><span class="o">.</span><span class="na">TH</span><span class="o">;</span>
<span class="nc">Days</span> <span class="n">d2</span> <span class="o">=</span> <span class="nc">Days</span><span class="o">.</span><span class="na">M</span><span class="o">;</span>
<span class="k">if</span><span class="o">(</span><span class="n">d1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="nc">Days</span><span class="o">.</span><span class="na">TH</span><span class="o">))</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"d1 is equal to Days.TH"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">d1</span> <span class="o">==</span> <span class="nc">Days</span><span class="o">.</span><span class="na">TH</span> <span class="o">?</span><span class="s">"d1 == Days.TH"</span> <span class="o">:</span> <span class="s">"d1 != d2. "</span><span class="o">);</span>

<span class="c1">//prints:</span>
<span class="c1">//d1 is equal to Days.TH</span>
<span class="c1">//d1 == Days.TH</span>
</code></pre></div></div>
<ul>
  <li>If an enum is used in a case statement, they should NOT use the class prefix. Everywhere else they should have prefix (e.g. <code class="highlighter-rouge">CoffeeSize.BIG</code>), unless the enum is in the same class</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CoffeeSize</span> <span class="n">c</span> <span class="o">=</span> <span class="nc">CoffeeSize</span><span class="o">.</span><span class="na">OVERWHELMING</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">c</span><span class="o">){</span>
<span class="k">case</span> <span class="nc">CoffeeSize</span><span class="o">.</span><span class="na">BIG</span><span class="o">:</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"im big"</span><span class="o">);</span> <span class="c1">//compiler error</span>
<span class="k">case</span> <span class="nl">HUGE:</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"im huge"</span><span class="o">);</span>
<span class="k">case</span> <span class="nl">OVERWHELMING:</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"im overwhelming"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">ordinal()</code> returns the ordinal position of the enum, the same as an array position e.g.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Days</span> <span class="n">d1</span> <span class="o">=</span> <span class="nc">Days</span><span class="o">.</span><span class="na">Th</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d1</span><span class="o">.</span><span class="na">ordinal</span><span class="o">());</span>	<span class="c1">// would return 3</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">valueOf()</code> can be used to parse a String (case-sensitive) to an enum type e.g.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Days</span> <span class="n">d</span> <span class="o">=</span> <span class="nc">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Day</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"M"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">//prints: M</span>
</code></pre></div></div>
:ET