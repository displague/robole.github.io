I"-6<p>When creating a REST API, good documentation is important for people to learn about your API, and how to use it without any headaches! <a href="https://swagger.io/">Swagger</a> provides a specification that generates documentation dynamically based on your code, and allows you to test it in the browser.</p>

<p>I will use it with Spring Boot and Springfox. Springfox allows you to use the spring data repositories as the basis for your documentation, which is important because with Spring Data REST, it is optional to create Controllers and this is usually the basis of the documentation.</p>

<h1 id="choose-a-project">Choose a project</h1>

<p>If you already have a suitable project, use it. If not, you can grab my <a href="https://github.com/robole/library-rest-minimum">Library example</a>.</p>

<h1 id="maven-dependencies">Maven Dependencies</h1>

<p>You need to include these 3 dependencies to include the Swagger and the UI for displaying the documentation.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.springfox<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>springfox-swagger2<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>2.8.0<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.springfox<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>springfox-swagger-ui<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>2.8.0<span class="nt">&lt;/version&gt;</span>
            <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.springfox<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>springfox-data-rest<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>2.8.0<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h1 id="configure-your-project">Configure your project</h1>

<p>You just need to add a few annotations in your application class like below.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableSwagger2</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">SpringDataRestConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryApplication</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">LibraryApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">@EnableSwagger2</code> is required to enable Swagger 2 support, it registers certain beans into the Spring application context.</li>
  <li><code class="highlighter-rouge">@Import</code> imports additional classes into the Spring application context that are needed to automatically create a Swagger documentation from our Spring Data REST repositories.</li>
</ul>

<h1 id="the-output">The Output</h1>

<p>When you run Spring Boot, you should be able to view the Swagger documentation of your Spring Data REST API by accessing <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> in your browser. The result should look something like the image below.</p>

<p><img src="/assets/img/blog/2018-05-21-swagger/swagger1.png" alt="swagger ui" /></p>

<h1 id="customize-documentation">Customize Documentation</h1>

<p>You can customize each aspect of what appears in the UI. You can some methods
to your <code class="highlighter-rouge">LibraryApplication</code>.</p>

<h1 id="customize-resources">Customize Resources</h1>

<p>You use the <code class="highlighter-rouge">Docket</code> bean for configuration.</p>

<p>We would like to control the resources (endpoints) shown in the documentation. We do this by:</p>

<ol>
  <li>Defining a <code class="highlighter-rouge">Docket</code> bean.</li>
  <li>Use <code class="highlighter-rouge">select()</code> to get an instance of <code class="highlighter-rouge">ApiSelectorBuilder</code>, which provides a way to control the endpoints exposed by Swagger.</li>
  <li>You can restrict what Swagger displays by passing parameters to  <code class="highlighter-rouge">apis()</code> and <code class="highlighter-rouge">paths()</code>. I wanted to restrict by the URL, with <code class="highlighter-rouge">paths()</code>, you can do this by only including the repositories that are available by a pattern such as “/api/.*”, this then excludes the <em>basic-error-controller</em> and <em>home-controller</em> .</li>
</ol>

<p><img src="/assets/img/blog/2018-05-21-swagger/swagger2.png" alt="swagger ui" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">Docket</span> <span class="nf">docket</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nf">Docket</span><span class="o">(</span><span class="nc">DocumentationType</span><span class="o">.</span><span class="na">SWAGGER_2</span><span class="o">)</span>
  	<span class="o">.</span><span class="na">select</span><span class="o">()</span>
  	<span class="o">.</span><span class="na">apis</span><span class="o">(</span><span class="nc">RequestHandlerSelectors</span><span class="o">.</span><span class="na">any</span><span class="o">())</span>
  	<span class="o">.</span><span class="na">paths</span><span class="o">(</span><span class="n">regex</span><span class="o">(</span><span class="s">"/api/.*"</span><span class="o">))</span>
  	<span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="customize-metadata">Customize Metadata</h2>

<p>To change the metadata that goes on the top of the API page, you use <code class="highlighter-rouge">Docket.apiInfo(ApiInfo apiInfo)</code>.</p>

<p><img src="/assets/img/blog/2018-05-21-swagger/swagger-metadata.png" alt="swagger ui" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//configure what Swagger will be interested in when creating documentation</span>
<span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">Docket</span> <span class="nf">docket</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nf">Docket</span><span class="o">(</span><span class="nc">DocumentationType</span><span class="o">.</span><span class="na">SWAGGER_2</span><span class="o">)</span>
  	<span class="o">.</span><span class="na">apiInfo</span><span class="o">(</span><span class="n">apiInfo</span><span class="o">())</span>
  	<span class="o">.</span><span class="na">select</span><span class="o">()</span>
  	<span class="o">.</span><span class="na">apis</span><span class="o">(</span><span class="nc">RequestHandlerSelectors</span><span class="o">.</span><span class="na">any</span><span class="o">())</span>
  	<span class="o">.</span><span class="na">paths</span><span class="o">(</span><span class="n">regex</span><span class="o">(</span><span class="s">"/api/.*"</span><span class="o">))</span>
  	<span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">//create api metadata that goes at the top of the generated page</span>
<span class="kd">private</span> <span class="nc">ApiInfo</span> <span class="nf">apiInfo</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiInfoBuilder</span><span class="o">()</span>
  	<span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"Rob's Library"</span><span class="o">)</span>
  	<span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">"Library application to show Spring Data Rest and Swagger."</span><span class="o">)</span>
  	<span class="o">.</span><span class="na">contact</span><span class="o">(</span><span class="k">new</span> <span class="nc">Contact</span><span class="o">(</span><span class="s">"Rob OLeary"</span><span class="o">,</span> <span class="s">"http://roboleary.design"</span><span class="o">,</span> <span class="s">""</span><span class="o">))</span>
  	<span class="o">.</span><span class="na">license</span><span class="o">(</span><span class="s">"Apache License Version 2.0"</span><span class="o">)</span>
  	<span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="s">"1.0"</span><span class="o">)</span>
  	<span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<h1 id="embed-in-our-own-page">Embed in our own page</h1>

<p>I wanted to have the contents from swagger UI in the body of my own page.</p>

<p>Download (or clone) the <a href="https://github.com/swagger-api/swagger-ui">Swagger UI repository</a>. You’ll need the following files from the <em>dist</em> folder:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swagger-ui.css
swagger-ui-bundle.js
swagger-ui-standalone-preset.js
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">&lt;head&gt;</code> section of your web page, add:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="stylesheet" type="text/css" href="swagger-ui.css"&gt;
</code></pre></div></div>

<p>Inside the <code class="highlighter-rouge">&lt;body&gt;</code>, write the code below. The <em>url</em> parameter is pointed to where Swagger generates the JSON of your API, I supply a relative path here.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/swagger-ui-bundle.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/swagger-ui-standalone-preset.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">ui</span> <span class="o">=</span> <span class="nx">SwaggerUIBundle</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/v2/api-docs</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dom_id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#swagger-ui</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">presets</span><span class="p">:</span> <span class="p">[</span>
      <span class="nx">SwaggerUIBundle</span><span class="p">.</span><span class="nx">presets</span><span class="p">.</span><span class="nx">apis</span><span class="p">,</span>
      <span class="nx">SwaggerUIStandalonePreset</span>
    <span class="p">],</span>
    <span class="na">docExpansion</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">})</span>

  <span class="nb">window</span><span class="p">.</span><span class="nx">ui</span> <span class="o">=</span> <span class="nx">ui</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>If you want to customize the display, you can provide parameters to <code class="highlighter-rouge">SwaggerUIBundle</code>, the list is <a href="https://github.com/swagger-api/swagger-ui/blob/HEAD/docs/usage/configuration.md#display">here</a>.</p>

<p>This is the result for my World Cup website. It doesn’t look perfect, but it works well.</p>

<p><img src="/assets/img/blog/2018-05-21-swagger/embed.png" alt="swagger ui" /></p>

<h1 id="source-code">Source code</h1>

<p>This version of the <a href="https://github.com/robole/library-rest-minimum5">Libary example</a> had Swagger UI added.</p>

<h1 id="references">References</h1>
<ul>
  <li><a href="https://reflectoring.io/documenting-spring-data-rest-api-with-springfox/">Documenting a Spring Data REST API with Springfox and Swagger</a></li>
  <li><a href="http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api">Setting Up Swagger 2 with a Spring REST API</a></li>
</ul>
:ET