I"/<p><a href="https://square.github.io/crossfilter/">Crossfilter</a> can perform fast multi-dimensional filtering on big datasets. It claims to work well on 1 million rows and more!</p>

<p>It is regularly used with D3 for creating co-ordinated charts based on the same dataset. This is what lead me to it!</p>

<p><a href="http://animateddata.co.uk/articles/crossfilter/">This tutorial</a> was the most useful I found that was example-led. But there was some blank spots in the explanations that I had to find in the <a href="https://github.com/square/crossfilter/wiki/API-Reference">API</a>, which is well-written.</p>

<p>I wanted to look at a dataset of travel routes in Ireland to discover how to use it properly with D3.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>id,origin,destination,journey_time,daily_frequency
0,Cork,Dublin,180,18
1,Cork,Tralee,90,10
2,Cork,Limerick,90,10
3,Galway,Cork,120,15
4,Galway,Roscommon,60,6
5,Roscommon,Sligo,45,4
</code></pre></div></div>

<h1 id="dimensions-and-filters">Dimensions and Filters</h1>

<p>A <em>dimension</em> is whatever fields you want to examine your dataset by. You can apply a filter to a dimension providing a value, a range of values, or you can write a custom filter function.</p>

<p>You can explore the code here to see a working example of what is explained below.</p>

<p data-height="265" data-theme-id="0" data-slug-hash="qKOGvg" data-default-tab="result" data-user="robjoeol" data-embed-version="2" data-pen-title="Filter dataset with crossfilter.js" class="codepen">See the Pen <a href="https://codepen.io/robjoeol/pen/qKOGvg/">Filter dataset with crossfilter.js</a> by rob (<a href="https://codepen.io/robjoeol">@robjoeol</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async="" src="https://static.codepen.io/assets/embed/ei.js"></script>

<h2 id="single-value-filter-origin--cork">Single value filter (origin = “Cork”)</h2>

<p>So if I want to look at my routes by the <em>origin</em>, where I want routes with an <em>origin</em> of “Cork” only, I would do the following:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">originDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">origin</span><span class="p">;</span> <span class="p">});</span>
<span class="nx">originDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="dl">"</span><span class="s2">Cork</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">idDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">));</span>
</code></pre></div></div>

<p><strong>results =</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0,Cork,Dublin,180,18
1,Cork,Tralee,90,10
2,Cork,Limerick,90,10
</code></pre></div></div>

<p>When looking at results of the filter, you can use <code class="highlighter-rouge">top(k)</code> and <code class="highlighter-rouge">bottom(k)</code> to control the number of items in the result set by providing a number as a parameter,  <code class="highlighter-rouge">top(Infinity)</code> shows everything.</p>

<h2 id="multiple-value-filter-origin--cork-or-roscommon">Multiple value filter (origin = “Cork” OR “Roscommon”)</h2>

<p>To find an <em>origin</em> of “Cork” OR “Roscommon”:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">originDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">origin</span><span class="p">;</span> <span class="p">});</span>
<span class="nx">originDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">([</span><span class="dl">"</span><span class="s2">Cork</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Roscommon</span><span class="dl">"</span><span class="p">]);</span>
<span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">idDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">));</span>
</code></pre></div></div>

<p><strong>results=</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0,Cork,Dublin,180,18
1,Cork,Tralee,90,10
2,Cork,Limerick,90,10
5,Roscommon,Sligo,45,4
</code></pre></div></div>

<h2 id="composite-dimension">Composite Dimension</h2>

<p>So if I want to find any route where “Cork” is the <em>origin</em> or the <em>destination</em>, it would be cool if I could make a origin-destination dimension and search in that. We can do this! :-D</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">originDestinationDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">origin</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">destination</span><span class="p">;});</span>
<span class="nx">originDestinationDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">Cork</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">originDestinationDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>results=</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0,Cork,Dublin,180,18
1,Cork,Tralee,90,10
2,Cork,Limerick,90,10
3,Galway,Cork,120,15
</code></pre></div></div>

<h2 id="filters-are-cumulative">Filters are cumulative</h2>

<p>If you apply filters on different dimensions, the filters are applied to the dataset, so when you retrieve results from any dimension, you get the cumulative result. Here I apply 2 filters: <em>origin</em> or <em>destination</em> of “Cork”, and exclude the <em>id</em> of 0, and I get 3 items based on them from the <em>idDim</em>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cf</span> <span class="o">=</span> <span class="nx">crossfilter</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">originDestinationDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">origin</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">destination</span><span class="p">;});</span>
<span class="kd">var</span> <span class="nx">idDim</span> <span class="o">=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">dimension</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">;});</span>

<span class="nx">originDestinationDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">Cork</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="nx">idDim</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">});</span>
<span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">idDim</span><span class="p">.</span><span class="nx">top</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">));</span>
</code></pre></div></div>

<p><strong>results=</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1,Cork,Tralee,90,10
2,Cork,Limerick,90,10
3,Galway,Cork,120,15
</code></pre></div></div>

<h1 id="aggregate-functions">Aggregate Functions</h1>

<p>Crossfilter offers a lot more for aggregating data if you want counts and totals. I won’t go into it as my focus was on filtering, and using it in conjunction with D3.</p>

<h1 id="conclusion">Conclusion</h1>

<p>It looks like a worthwhile library. I will use in a project and report back on it’s success (I hope)!</p>

<h1 id="references">References</h1>

<p><a href="https://github.com/square/crossfilter/wiki/API-Reference">Crossfilter API</a></p>
:ET